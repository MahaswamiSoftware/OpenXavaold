
#declare import="org.openxava.util.*"#
#declare import="org.openxava.util.meta.MetaSet"#
#declare import="org.openxava.component.MetaComponent"#
#declare import="org.openxava.model.meta.*"#
#declare import="org.openxava.calculators.*"#
#declare import="org.openxava.generators.*"#
#declare import="org.openxava.mapping.*"#


# 
String packageName = properties.getProperty("arg3");
String componentName = properties.getProperty("arg4");
String aggregateName = properties.getProperty("arg5");
MetaComponent component = MetaComponent.get(componentName);

String name=null;
MetaModel metaModel=null;
if (aggregateName == null) {
	name=componentName;	
	metaModel = component.getMetaEntity();
}
else {
	name=aggregateName;	
	metaModel = component.getMetaAggregate(aggregateName);
}


#
// File generated by OpenXava: #(new Date())#
// Archivo generado por OpenXava: #(new Date())#

// WARNING: NO EDIT
// OJO: NO EDITAR


# if (aggregateName == null) { #
// Component: #(componentName)#		Entity/Entidad
# } else { #
// Component: #(componentName)#		Aggregate/Agregado: #(aggregateName)#
# } #

package #(packageName)#;

import java.util.*;
import java.math.*;
import java.rmi.RemoteException;
import org.openxava.component.MetaComponent;
import org.openxava.model.meta.MetaModel;
import org.openxava.util.*;

/**
 * 
 * @author MCarmen Gimeno
 */
public class #(name)# implements java.io.Serializable, #(metaModel.getInterfaceName())# {	

	// Constructor
	public #(name)#() {
		initMembers();
	}
	
	# InitMembersPG.generate(context, out, metaModel, false); # 
	
	// Properties/Propiedades
	
# 
Iterator itProperties = metaModel.getMetaProperties().iterator();	
while (itProperties.hasNext()) {	
	MetaProperty property = (MetaProperty) itProperties.next();
	PropertyPG.generate(context, out, property); 
}
# 

	// References/Referencias
	
# 
Iterator itReferences = metaModel.getMetaReferences().iterator();	
while (itReferences.hasNext()) {	
	MetaReference ref = (MetaReference) itReferences.next();
	if (ref.getMetaModelReferenced() instanceof MetaAggregateForReference) {
		AggregateReferencePG.generate(context, out, ref); 
	}
	else {
		EntityReferencePG.generate(context, out, ref); 
	}
}
# 

	// Colecciones/Collections
	
# 
Iterator itCollections = metaModel.getMetaCollections().iterator();	
while (itCollections.hasNext()) {	
	MetaCollection col = (MetaCollection) itCollections.next();
	String colName = Strings.firstUpper(col.getName());
	MetaReference reference = col.getMetaReference();
	String colType = reference.getMetaModelReferenced().getInterfaceName();
	String roleName = Strings.firstUpper(reference.getRole());
	if (!col.hasCondition() && !col.hasCalculator()) {
# 
	private java.util.Collection #(col.getName())#;
	public java.util.Collection get#(colName)#() {
		return #(col.getName())#;
	}
	public void set#(colName)#(java.util.Collection #(col.getName())#) {
		this.#(col.getName())# = #(col.getName())#;
	}
# 
	}
	if (col.hasCondition()) {
# 
	public java.util.Collection get#(colName)#() throws RemoteException {
		return get#(colName)#_hibernate();
	}
	
	private java.util.Collection get#(colName)#_hibernate() throws RemoteException {
		org.hibernate.Query query = org.openxava.hibernate.XHibernate.getSession().createQuery("#(col.getHQLCondition())#");		
# 
		int i=0;
		for (Iterator it = col.getMetaPropertiesFinderArguments(true).iterator(); it.hasNext(); i++) {
			MetaProperty parameter = (MetaProperty) it.next();
			String argument = Generators.convertPropertyNameInPropertyCall(parameter.getName());
			if (parameter.getType().isPrimitive()) {
				argument = Generators.generatePrimitiveWrapper(parameter.getTypeName(), argument);
			}
#
		query.setParameter(#(i)#, #(argument)#);
# 		
		}
# 	 
		return query.list();
	}	

# 
	}
	else if (col.hasCalculator()) {
		CalculatedCollectionPG.generate(context, out, col);	
	}
	if (!reference.isAggregate() && 
		!col.hasCondition() && 
		!col.hasCalculator() && 
		!reference.getMetaModelReferenced().getMetaReference(reference.getRole()).isKey()) { 
# 
	
	public void addTo#(colName)#(#(colType)# newElement) throws RemoteException {
		this.get#(colName)#().add(newElement);
		newElement.set#(roleName)#(this);
	}
	public void removeFrom#(colName)#(#(colType)# toRemove) throws RemoteException {
		this.get#(colName)#().remove(toRemove);
		toRemove.set#(roleName)#(null);
	}
# 
	}
# 

# 
}
# 

# 	
	MethodsPG.generate(context, out, metaModel); 
# 	

	// User defined finders/Buscadores definidos por el usuario
	
	
# 

 Iterator itFinders = metaModel.getMetaFinders().iterator();
 while (itFinders.hasNext()) {
 	MetaFinder finder = (MetaFinder) itFinders.next();
 	String finderName = Strings.firstUpper(finder.getName());
 	String arguments = finder.getArguments();
 	String condition = finder.getEJBQLCondition(); 	
 	String type = finder.isCollection()?"Collection":name;
 	String exception = finder.isCollection()?"":"throws javax.ejb.ObjectNotFoundException";
# 	
 	public static #(type)# find#(finderName)#(#(arguments)#) #(exception)# {
		org.hibernate.Query query = org.openxava.hibernate.XHibernate.getSession().createQuery("#(finder.getHQLCondition())#");
 		# if (finder.isCollection()) { # 
 			org.hibernate.Query sizeQuery = org.openxava.hibernate.XHibernate.getSession().createQuery("#(finder.getHQLCountSentence())#");
 		# } #
# 
		int i=0;
		for (Iterator it = finder.getMetaPropertiesArguments().iterator(); it.hasNext(); i++) {
			MetaProperty parameter = (MetaProperty) it.next();
			String argument = parameter.getName();
			if (parameter.getType().isPrimitive()) {
				argument = Generators.generatePrimitiveWrapper(parameter.getTypeName(), argument);
			}
# 
		query.setParameter("arg#(i)#", #(argument)#);
			# if (finder.isCollection()) { # 
		sizeQuery.setParameter("arg#(i)#", #(argument)#);
			# } # 
# 
		}
# 
 		# if (finder.isCollection()) { # 
 			return new org.openxava.hibernate.impl.FastSizeList(query, sizeQuery);
 		# } else { # 
		#(name)# r = (#(name)#) query.uniqueResult();
		if (r == null) {
			throw new javax.ejb.ObjectNotFoundException(XavaResources.getString("object_not_found", "#(name)#"));
		}
		return r;
		# } # 
 	}
# 
 }
# 


	private static MetaModel metaModel;
	public MetaModel getMetaModel() throws XavaException {
		if (metaModel == null) {
		# if (aggregateName == null) { #
			metaModel = MetaComponent.get("#(componentName)#").getMetaEntity();
		# } else { # 
			metaModel = MetaComponent.get("#(componentName)#").getMetaAggregate("#(aggregateName)#");
		# } # 	
		}
		return metaModel;
	}
	
	public String toString() {		
		try {
			return getMetaModel().toString(this);
		}
		catch (XavaException ex) {
			System.err.println(XavaResources.getString("toString_warning", "#(name)#"));
			return super.toString();
		}		
	}

	public boolean equals(Object other) {		
		if (other == null) return false;
		return toString().equals(other.toString());
	}
	
	public int hashCode() {		
		return toString().hashCode();
	}
	
}

