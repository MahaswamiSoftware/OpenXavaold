#declare import="org.openxava.util.Strings"#
#declare import="org.openxava.util.XavaException"#
#declare import="org.openxava.util.meta.*"#
#declare import="org.openxava.model.meta.*"#
#declare import="org.openxava.component.MetaComponent"#
#declare import="org.openxava.calculators.*"#
#declare import="org.openxava.generators.*"#
#declare import="org.openxava.mapping.*"#

# 
String packageName = properties.getProperty("arg3");
String componentName = properties.getProperty("arg4");
String aggregateName = properties.getProperty("arg5");
MetaComponent component = MetaComponent.get(componentName);

String name=null;
MetaModel metaModel=null;
ModelMapping modelMapping=null;

if (aggregateName == null) {
	name=componentName;	
	metaModel = component.getMetaEntity();
	modelMapping = component.getEntityMapping();
}
else {
	name=aggregateName;	
	metaModel = component.getMetaAggregate(aggregateName);
	modelMapping = component.getAggregateMapping(aggregateName);	
}
String interfaces = metaModel.getInterfacesNames().isEmpty()?"":" extends " + metaModel.getImplements();
#

// File generated by OpenXava: #(new Date())#
// Archivo generado por OpenXava: #(new Date())#

// WARNING: NO EDIT
// OJO: NO EDITAR

# if (aggregateName == null) { #
// Component: #(componentName)#		Java interface for entity/Interfaz java para Entidad
# } else { #
// Component: #(componentName)#		Java interface for aggregate/Interfaz java para Agregado: #(aggregateName)#
# } #

package #(packageName)#;

import java.math.*;
import java.rmi.RemoteException;


public interface I#(name)# #(interfaces)# {	

	// Properties/Propiedades
	
# 
Iterator itProperties = metaModel.getMetaProperties().iterator();	
while (itProperties.hasNext()) {	
	MetaProperty property = (MetaProperty) itProperties.next();
	String propertyName = Strings.firstUpper(property.getName());
	String type = property.getTypeName();	
	String get = type.equals("boolean")?"is":"get";	
	# 	
	public static final String PROPERTY_#(property.getName())# = "#(property.getName())#";
	# 

	if (property.isCalculated() || property.isKey()) {
		// Read only
	# 	
	#(type)# #(get)##(propertyName)#() throws RemoteException;
	# 
	}
	else {
	# 
	#(type)# #(get)##(propertyName)#() throws RemoteException;
	void set#(propertyName)#(#(type)# #(property.getName())#) throws RemoteException;
	#  		
	} // else
} //while 

	// Collections/Colecciones
	

Iterator itCollections = metaModel.getMetaCollections().iterator();	
while (itCollections.hasNext()) {	
	MetaCollection collection = (MetaCollection) itCollections.next();
	String collectionName = Strings.firstUpper(collection.getName());
	MetaReference reference = collection.getMetaReference();	
	MetaModel referencedModel = reference.getMetaModelReferenced();
	String referencedModelName = reference.getReferencedModelName();
	String referencedModelClass = referencedModel.getInterfaceName();	
	
 	if (!reference.isAggregate() && 
		!collection.hasCondition() && 
		!collection.hasCalculator() && 
		!reference.getMetaModelReferenced().getMetaReference(reference.getRole()).isKey()) {	
# 
	void addTo#(collectionName)#(#(referencedModelClass)# newElement) throws RemoteException;
	void removeFrom#(collectionName)#(#(referencedModelClass)# toRemove) throws RemoteException;
	
# } // if aggregate #	

	java.util.Collection get#(collectionName)#() throws RemoteException;
			
# } // while collections #		

	// References/Referencias
	
  
# 
Iterator itReferences = metaModel.getMetaReferences().iterator();	
while (itReferences.hasNext()) {	
	MetaReference reference = (MetaReference) itReferences.next();
	String referenceName = Strings.firstUpper(reference.getName());	
	if (reference.getMetaModelReferenced() instanceof MetaAggregateForReference) {	
		MetaAggregateForReference referencedModel = (MetaAggregateForReference) reference.getMetaModelReferenced();
		String referencedModelClass = referencedModel.getBeanClass();					
#  	
	// #(referenceName)# : Aggregate 
	
	#(referencedModelClass)# get#(referenceName)#() throws RemoteException;
	void set#(referenceName)#(#(referencedModelClass)# new#(referenceName)#) throws RemoteException;
	

# } else { // reference to entity or EJB aggregate
		MetaModel referencedModel = reference.getMetaModelReferenced();
		String referencedModelClass = referencedModel.getInterfaceName();
		
# 

	// #(referenceName)# : Reference/Referencia
	
	#(referencedModelClass)# get#(referenceName)#() throws RemoteException;
	void set#(referenceName)#(#(referencedModelClass)# new#(referenceName)#) throws RemoteException;
			
# } // if/else aggregate/reference #

# } // References #

	// Methods
# 
Iterator itMethods = metaModel.getMetaMethods().iterator();	
while (itMethods.hasNext()) {	
	MetaMethod method = (MetaMethod) itMethods.next();
	String throwSentence = "throws " + (method.hasExceptions()?method.getExceptions() + ", RemoteException":"RemoteException");
# 
	#(method.getTypeName())# #(method.getName())#(#(method.getArguments())#) #(throwSentence)#;
# 		
} // Methods
# 


}
